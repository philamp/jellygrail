#!/bin/sh -e

# This is the first program launched at container start.
# We don't know where our binaries are and we cannot guarantee
# that the default PATH can access them.
# So this script needs to be entirely self-contained until it has
# at least /command, /usr/bin and /bin in its PATH.

# load dotenv
. /jellygrail/config/settings.env

# jellygrail custom function:
create_service() {
  template_path=$1
  dst_folder=$2
  cfg_file=$3
  service_name=$4
  src_folder=$5
  dependency=$6
  
  service_dir="/etc/s6-overlay/s6-rc.d/${service_name}"
  dependencies_dir="${service_dir}/dependencies.d"
  contents_file="/etc/s6-overlay/s6-rc.d/user/contents.d/${service_name}"

  mkdir -p "${dst_folder}" "${service_dir}" "${dependencies_dir}"
  echo "longrun" > "${service_dir}/type"
  touch "${dependencies_dir}/base"
  touch "${dependencies_dir}/create_data_folder"

  # it becomes a dependency for bindfs main service
  touch "/etc/s6-overlay/s6-rc.d/bindfs/dependencies.d/${service_name}"

  # Add additional dependencies if provided
  if [ "$#" -eq 6 ]; then
    touch "${dependencies_dir}/${dependency}"
  fi

  cp "${template_path}" "${service_dir}/run"
  sed -i "s|<dst_folder>|${dst_folder}|g" "${service_dir}/run"
  [ ! -z "${cfg_file}" ] && sed -i "s|<cfg_file>|${cfg_file}|g" "${service_dir}/run"
  [ ! -z "${src_folder}" ] && sed -i "s|<src_folder>|${src_folder}|g" "${service_dir}/run"
  sed -i "s|<service_name>|${service_name}|g" "${service_dir}/run"

  # touch "${contents_file}"
}

addpath () {
  x="$1"
  IFS=:
  set -- $PATH
  IFS=
  while test "$#" -gt 0 ; do
    if test "$1" = "$x" ; then
      return
    fi
    shift
  done
  PATH="${x}:$PATH"
}

if test -z "$PATH" ; then
  PATH=/bin
fi

addpath /bin
addpath /usr/bin
addpath /command
export PATH

  

# Jellygrail services install

for dir_path in /mounts/*; do
  [ -d "${dir_path}" ] || continue # if not a directory, skip
  dir_name=$(basename "${dir_path}")

  case "$dir_name" in
    remote_*)
      if [ -f "${dir_path}/rclone.conf" ]; then
        create_service "/bash_templates/rclone.tpl.sh" \
                       "${dir_path}/" \
                       "${dir_path}/rclone.conf" \
                       "${dir_name}"

        create_service "/bash_templates/remote_rar2fs.tpl.sh" \
                       "/mounts/rar2fs_${dir_name}" \
                       "" \
                       "rar2fs_${dir_name}" \
                       "${dir_path}/" \
                       "${dir_name}"
      else
        echo "Warning: No rclone.conf found in ${dir_path}. Skipping..."
      fi
      ;;
    local_*)
      if [ -d "${dir_path}/movies" ] || [ -d "${dir_path}/shows" ]; then
        create_service "/bash_templates/remote_rar2fs.tpl.sh" \
                       "/mounts/rar2fs_${dir_name}" \
                       "" \
                       "rar2fs_${dir_name}" \
                       "${dir_path}/"
      else
        echo "Warning: 'movies' or 'shows' directories not found in ${dir_path}. Skipping..."
      fi
      ;;
    *)
      echo "Skipping ${dir_path} as it does not start with 'remote_' or 'local_'"
      ;;
  esac
done

if [ "$JF_WANTED" = "no" ]; then
  rm -f /etc/s6-overlay/s6-rc.d/user/contents.d/jellyfin
fi

# this part triggers only if /root/devmode folder is found, it's for devleopment purposes only
if [ -d "/root/devmode" ]; then
  apt install openssh-server nano libsqlite3-dev sqlite3 cmake -y
  rm -f /etc/s6-overlay/s6-rc.d/user/contents.d/*
  service ssh stop
  mkdir -p /root/.ssh
  cp -R /root/devmode/* /root/.ssh/
  sed -i 's/^#Port 22/Port 23/' /etc/ssh/sshd_config
  # echo "AuthorizedKeysFile /root/.ssh/authorized_keys" >> /etc/ssh/sshd_config
  service ssh start
  # dev-context services
  touch /etc/s6-overlay/s6-rc.d/user/contents.d/remote_realdebrid
  touch /etc/s6-overlay/s6-rc.d/user/contents.d/rar2fs_remote_realdebrid
  touch /etc/s6-overlay/s6-rc.d/user/contents.d/rar2fs_local_drive1
  touch /etc/s6-overlay/s6-rc.d/user/contents.d/rar2fs_local_drive2
  # disrupt normal execution
  cp -f /usr/local/bin/grail_jelly/devmode.py /usr/local/bin/grail_jelly/main.py
  mkdir -p /root/dev
  # end dev-context services
  git config --global user.email "xxxxxxxx@gmail.com"
fi
# the above part triggers only if /root/devmode folder is found, it's for devleopment purposes only

# Now we're good: s6-overlay-suexec is accessible via PATH, as are
# all our binaries.
# Run preinit as root, then run stage0 as the container's user (can be
# root, can be a normal user).

exec s6-overlay-suexec \
  ' /package/admin/s6-overlay-3.1.5.0/libexec/preinit' \
  '' \
  /package/admin/s6-overlay-3.1.5.0/libexec/stage0 \
  "$@"
